fn cstrlen ptr -- int ptr in 0 1 while drop over over swap cast(int) + cast(ptr) @ 0 != if 1 + 1 else 0 end end drop swap end
fn puts ptr int in 1 1 syscall3 end
fn / int int -- int in /% drop end
fn % int int -- int in /% swap drop end
fn eputs ptr int in 2 1 syscall3 end

const null 0 end
const nullptr 0 cast(ptr) end
fn write ptr int int in 1 syscall3 end
fn exit int in 3 syscall1 end
fn div int int -- int in /% drop end
fn mod int int -- int in /% swap drop end
fn nthArg int -- ptr in 8 * argv cast(int) + cast(ptr) @64 cast(ptr) end
fn ptr+ int ptr -- ptr in cast(int) + cast(ptr) end

const true  1 cast(bool) end
const false 0 cast(bool) end

fn cstrToStr ptr -- ptr int in cstrlen swap end
fn lnot bool -- bool in if false else true end end


# ptr ptr
fn cstreq ptr ptr -- int in


here puts ": TODO: Implement cstreq" puts
drop drop 0
end
fn puteol in "\n" 1 1 syscall3 end
memory argc 8 end
argv 0 8 - ptr+ @ argc !