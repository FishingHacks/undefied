include "values"

.ifdef / undef / .end
.ifdef % undef % .end
.ifdef div undef div .end
.ifdef mod undef mod .end
.ifdef @int undef @int .end
.ifdef !int undef !int .end
.ifdef gethexcc undef gethexcc .end
.ifdef hexToStr undef hexToStr .end
.ifdef decToStr undef decToStr .end
.ifdef binToStr undef binToStr .end
.ifdef pb_tmp_store .error "pb_tmp_store is already defined :c" .end
.ifdef pd_tmp_store .error "pd_tmp_store is already defined :c" .end
.ifdef ph_tmp_store .error "ph_tmp_store is already defined :c" .end

inline fn / int int -- int in /% drop end
inline fn % int int -- int in /% swap drop end
inline fn div int int -- int in /% drop end
inline fn mod int int -- int in /% swap drop end
inline fn @int ptr -- int in @64 end
inline fn !int int ptr in swap !64 end

inline fn gethexcc int -- int in
    dup 10 < if '0' +
    else 'a' + 10 - end 
end

memory ph_tmp_store 32 end

fn hexToStr int -- ptr int in 
dup 1 < if drop "0" return end
31 swap
while
    dup 15 and gethexcc
    swap rot over ph_tmp_store cast(int) + cast(ptr) !8
    1 -
    swap
    4 shr
    dup 1 <
    if drop 0 end
end
drop dup 1 + ph_tmp_store cast(int) + cast(ptr) swap 31 swap - swap
end

memory pd_tmp_store 32 end

# .param __provided_externally__
# fn console.info any any in end

fn decToStr int -- ptr int in
dup 1 < if drop "0" return end
31 swap
while
    10 /% '0' +
    rot rot swap over pd_tmp_store cast(int) + cast(ptr) !8
    1 - swap
    dup
    0 <= if drop 0 end
end
drop dup 1 + pd_tmp_store cast(int) + cast(ptr) swap 31 swap - swap
end

memory pb_tmp_store 64 end

fn binToStr int -- ptr int in 
dup 1 < if drop "0" return end
31 swap
while
    dup 1 and '0' +
    swap rot over pb_tmp_store cast(int) + cast(ptr) !8
    1 -
    swap
    1 shr
    dup 1 <
    if drop 0 end
end
drop dup 1 + pb_tmp_store cast(int) + cast(ptr) swap 31 swap - swap
end